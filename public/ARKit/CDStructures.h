//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  7 2017 08:40:43).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Named Structures

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct CovariantVector<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::geometry::ISurface<float>, acv::ICovariantVector<acv::geometry::ISurface<float>>>>> {
    CDUnknownFunctionPointerType *_vptr$ICovariantVectorBase;
    struct shared_ptr<std::__1::vector<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>, std::__1::allocator<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>>>> m_vector;
    struct shared_ptr<acv::CovariantVectorInterface<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::geometry::ISurface<float>, acv::ICovariantVector<acv::geometry::ISurface<float>>>>> m_originalInterface;
};

struct CovariantVectorInterface<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::geometry::ISurface<float>, acv::ICovariantVector<acv::geometry::ISurface<float>>>>;

struct IAlignedSurfaceDetector<float>;

struct Image {
    struct shared_ptr<acv::graphics::ImageBuffer> _field1;
};

struct ImageBuffer;

struct MarkerDetector {
    struct shared_ptr<acv::vision::marker::MarkerDetectorImpl> _field1;
    struct Settings _field2;
    struct map<int, acv::vision::marker::ReferenceMarker, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, acv::vision::marker::ReferenceMarker>>> _field3;
    struct Image _field4;
    struct Image _field5;
    struct Image _field6;
    struct Image _field7;
    struct Image _field8;
    struct vector<float, std::__1::allocator<float>> _field9;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field10;
    struct vector<float, std::__1::allocator<float>> _field11;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field12;
};

struct MarkerDetectorImpl;

struct PinholeCamera;

struct Settings {
    int _field1;
    unsigned char _field2;
    int _field3;
    int _field4;
    _Bool _field5;
    int _field6;
};

struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))>> {
    void *__first_;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct map<int, acv::vision::marker::DetectedMarker, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, acv::vision::marker::DetectedMarker>>> {
    struct __tree<std::__1::__value_type<int, acv::vision::marker::DetectedMarker>, std::__1::__map_value_compare<int, std::__1::__value_type<int, acv::vision::marker::DetectedMarker>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, acv::vision::marker::DetectedMarker>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, acv::vision::marker::DetectedMarker>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, acv::vision::marker::DetectedMarker>, std::__1::less<int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<int, acv::vision::marker::ReferenceMarker, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, acv::vision::marker::ReferenceMarker>>> {
    struct __tree<std::__1::__value_type<int, acv::vision::marker::ReferenceMarker>, std::__1::__map_value_compare<int, std::__1::__value_type<int, acv::vision::marker::ReferenceMarker>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, acv::vision::marker::ReferenceMarker>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, acv::vision::marker::ReferenceMarker>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, acv::vision::marker::ReferenceMarker>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<acv::CovariantVectorInterface<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::geometry::ISurface<float>, acv::ICovariantVector<acv::geometry::ISurface<float>>>>> {
    struct CovariantVectorInterface<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::geometry::ISurface<float>, acv::ICovariantVector<acv::geometry::ISurface<float>>>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<acv::graphics::ImageBuffer> {
    struct ImageBuffer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<acv::math::PinholeCamera> {
    struct PinholeCamera *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<acv::tracking::detection::IAlignedSurfaceDetector<float>> {
    struct IAlignedSurfaceDetector<float> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<acv::vision::marker::MarkerDetectorImpl> {
    struct MarkerDetectorImpl *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<std::__1::vector<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>, std::__1::allocator<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>>>> {
    struct vector<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>, std::__1::allocator<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct vector<ARPatch, std::__1::allocator<ARPatch>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<ARPatch *, std::__1::allocator<ARPatch>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>, std::__1::allocator<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>>>;

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *_field1;
    } _field3;
};

#if 0
// Names with conflicting types:
typedef struct ?<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))>> {
    struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))>> **_field1;
} vector_0a935f00;

typedef struct ?<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))>> __end_cap_;
} vector_fff08e2a;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    double m11;
    double m12;
    double m13;
    double m21;
    double m22;
    double m23;
    double m31;
    double m32;
    double m33;
} CDStruct_2d7b3170;

typedef struct {
    double x;
    double y;
    double z;
} CDStruct_31142d93;

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long state;
    long long reason;
    _Bool relocalized;
} CDStruct_fdd7a678;

typedef struct CDStruct_183601bc;

// Template types
typedef struct CovariantVector<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::geometry::ISurface<float>, acv::ICovariantVector<acv::geometry::ISurface<float>>>>> {
    CDUnknownFunctionPointerType *_vptr$ICovariantVectorBase;
    struct shared_ptr<std::__1::vector<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>, std::__1::allocator<std::__1::shared_ptr<acv::tracking::detection::IAlignedSurface<float>>>>> m_vector;
    struct shared_ptr<acv::CovariantVectorInterface<acv::tracking::detection::IAlignedSurface<float>, acv::CovariantVectorInterface<acv::geometry::ISurface<float>, acv::ICovariantVector<acv::geometry::ISurface<float>>>>> m_originalInterface;
} CovariantVector_bf42e37e;

typedef struct shared_ptr<acv::tracking::detection::IAlignedSurfaceDetector<float>> {
    struct IAlignedSurfaceDetector<float> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_406f5783;

typedef struct vector<ARPatch, std::__1::allocator<ARPatch>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<ARPatch *, std::__1::allocator<ARPatch>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
} vector_b5b5dea7;

